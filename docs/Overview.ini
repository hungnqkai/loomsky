# OVERVIEW
- Tên: LoomSky
- Loại Hình: SAAS
- Mô Hình Doanh Thu: Freemium
- Tích hợp đa nền tảng: Wordpress, Shopify, Nền tảng landingpage html

# Unique Value Proposition
Complete Solution:
✓ Journey tracking + A/B testing + CAPI integration
✓ Single platform thay vì multiple tools
✓ Better pricing than enterprise solutions
✓ Freemium accessibility

Technical Differentiators:
✓ Cross-platform identity resolution
✓ Real-time journey stitching
✓ WordPress/Shopify/Landingpage deep integration
✓ Visual no-code setup
✓ Enhanced Facebook attribution

# Data Flow
1. User Visit → Identity Resolution
2. Identity + UTM → Attribution Tracking  
3. Attribution + Session → Event Processing
4. Event + Page → A/B Test Assignment
5. Event + Attribution → Facebook CAPI
6. All Data → Real-time Analytics
7. Analytics → Dashboard Updates

graph TB
    subgraph "Customer Website"
        A[User Visits Website] --> B[Loomsky SDK Loads]
        B --> C[Capture UTM Parameters]
        C --> D[Resolve User Identity]
        D --> E[Start/Continue Session]
        E --> F[Track Page View Event]
    end

    subgraph "Platform Detection"
        F --> G{Platform Type?}
        G -->|WordPress| H[WordPress API Integration]
        G -->|Shopify| I[Shopify Data Enhancement]
        G -->|Generic| J[Generic Tracking]
    end

    subgraph "Identity Resolution Module"
        D --> K{Existing User?}
        K -->|Yes| L[Load User Profile]
        K -->|No| M[Create Anonymous User]
        L --> N[Update Last Seen]
        M --> O[Generate ls_anon_ID]
    end

    subgraph "Attribution Module"
        C --> P[Process UTM Data]
        P --> Q{First Touch?}
        Q -->|Yes| R[Create First Touch Attribution]
        Q -->|No| S[Create Multi-Touch Attribution]
        R --> T[Store Attribution Chain]
        S --> T
    end

    subgraph "A/B Testing Module"
        F --> U{Active A/B Tests?}
        U -->|Yes| V[Check User Assignment]
        U -->|No| W[Continue Normal Flow]
        V --> X{Already Assigned?}
        X -->|Yes| Y[Load Existing Variant]
        X -->|No| Z[Assign New Variant]
        Z --> AA[Apply Variant Changes]
        Y --> AA
    end

    subgraph "Event Processing"
        AA --> BB[Process Event Data]
        BB --> CC[Enrich with Context]
        CC --> DD[Store in Database]
        DD --> EE[Queue Background Jobs]
    end

    subgraph "Facebook CAPI Module"
        EE --> FF{Facebook Integration?}
        FF -->|Yes| GG[Prepare CAPI Event]
        FF -->|No| HH[Skip Facebook]
        GG --> II[Hash User Data]
        II --> JJ[Send to Facebook API]
        JJ --> KK[Log CAPI Response]
    end

    subgraph "Analytics Module"
        DD --> LL[Update Real-time Metrics]
        LL --> MM[Process Journey Data]
        MM --> NN[Calculate Funnel Steps]
        NN --> OO[Update Dashboard]
    end

    subgraph "Database Layer"
        DD --> PP[(Users Table)]
        DD --> QQ[(Events Table)]
        DD --> RR[(Sessions Table)]
        DD --> SS[(Attribution Table)]
        DD --> TT[(A/B Tests Table)]
        KK --> UU[(Facebook Events Table)]
    end

    subgraph "Real-time Updates"
        OO --> VV[WebSocket Emit]
        VV --> WW[Dashboard Update]
        VV --> XX[Live Analytics]
    end

    subgraph "Background Processing"
        EE --> YY[Analytics Queue]
        EE --> ZZ[Facebook Queue]
        EE --> AAA[Email Queue]
        YY --> BBB[Process Daily Reports]
        ZZ --> CCC[Retry Failed Events]
        AAA --> DDD[Send Notifications]
    end
    
# Core Features
1. Core Base
Quản lý client
Quản lý user / team
Quản lý Subscription
JWT: jsonwebtoken + refresh token rotation
Thanh toán Paypal
Tích hợp i18n Frontend Vue

2. Customer Journey
Real-time user tracking across multiple touchpoints
Visual journey visualization với funnel analysis (Awareness - Consideration - Decision - Sử dụng UTM mapping???)
Cross-device journey stitching
Behavioral segmentation và user profiling
Journey completion rates và drop-off analysis

3. Dynamic Web Interface Changes (A/B Testing)
Visual element selector (giống GTM interface)
Real-time content modification (prices, layouts, content)
Multi-variant testing với statistical significance
Automated traffic allocation và winner selection
Conversion rate optimization tools

4. Facebook CAPI Integration
Server-side event tracking bypass iOS 14.5+ limitations
Enhanced attribution với complete user data
Custom audience building từ journey data
ROAS optimization với A/B test variants
Event deduplication giữa Pixel và CAPI

# Technology Stack
1. Backend
Core Framework:
├── Node.js với Express.js
├── Bull Queue cho background processing
├── PostgreSQL + Sequelize ORM
├── Redis cho sessions và caching
├── Express-session với Redis store
└── CORS middleware
Additional Tools:
├── Pm2 
└── Socket.io cho real-time updates

2. Frontend (Vue.js)
Core Framework:
├── Vue 3 với Composition API
├── Pinia cho state management
├── Vue Router cho routing
├── Vuetify 3 cho UI components
├── Vue3 ApexCharts cho visualization
└── SCSS cho styling
Additional Tools:
├── Axios cho HTTP requests
├── Socket.io client cho real-time
└── Vite cho build tooling

# Database Architecture
Core Tables:
├── users (identity management)
├── clients (customer accounts)
├── events (user interactions)
├── sessions (user sessions)
├── ab_tests (A/B test configs)
├── journeys (customer journeys)
└── facebook_events (CAPI data)

Optimization:
├── Partitioning by date
├── Strategic indexing
├── Read replicas
└── Connection pooling

# Backend API Routes
Separate route groups
app.use('/api/v1/customer', customerRoutes);     # app.loomsky.net
app.use('/api/v1/admin', adminAuthMiddleware, adminRoutes);  # admin.loomsky.net

Admin-only endpoints
router.get('/admin/customers', getCustomerList);
router.get('/admin/system/health', getSystemHealth);
router.post('/admin/features/toggle', toggleFeature);

# Project Structure
journey-tracker-saas/
├── backend/                    # Shared API
├── frontend-customer/          # Customer dashboard (app.loomsky.net)
├── frontend-admin/            # Admin panel (admin.loomsky.net)  
└── sdk/                       # Customer SDK

# Backend Structure (Node.js)
backend/
├── src/
│   ├── config/                 # Configuration files
│   │   ├── database.js
│   │   ├── redis.js
│   │   ├── facebook.js
│   │   ├── environment.js
│   │   └── index.js
│   │
│   ├── controllers/            # Route controllers
│   │
│   ├── models/                 # Database models (Sequelize)
│   │
│   ├── routes/                 # API routes
│   │   ├── v1/
│   │   └── index.js
│   │
│   ├── services/               # Business logic
│   │
│   ├── middleware/             # Express middleware
│   │
│   ├── jobs/                   # Background jobs (Bull Queue)
│   │   ├── processors/
│   │   ├── queues/
│   │   └── index.js
│   │
│   ├── utils/                  # Utility functions
│   │
│   ├── database/               # Database related
│   │   ├── migrations/
│   │   ├── seeders/
│   │   └── index.js
│   │
│   ├── websocket/              # Socket.io handlers
│   │   ├── handlers/
│   │   ├── middleware/
│   │   └── index.js
│   │
│   ├── validators/             # Input validation schemas
│   │
│   └── app.js                  # Express app setup
│
├── tests/                      # Test files
│   ├── unit/
│   ├── integration/
│   ├── fixtures/
│   └── setup.js
│
├── package.json
├── .env
└── server.js                   # Entry point

# Frontend Structure
frontend/
├── public/
│   ├── index.html
│   ├── favicon.ico
│   └── assets/
│       ├── images/
│       └── icons/
│
├── src/
│   ├── components/             # Reusable components
│   │   ├── common/
│   │   │
│   │   ├── charts/
│   │   │
│   │   ├── journey/
│   │   │
│   │   ├── abtest/
│   │   │
│   │   ├── analytics/
│   │   │
│   │   ├── integrations/
│   │   │
│   │   └── forms/
│   │
│   ├── views/                  # Page components
│   │   ├── auth/
│   │   │
│   │   ├── dashboard/
│   │   │
│   │   ├── journey/
│   │   │
│   │   ├── abtest/
│   │   │
│   │   ├── integrations/
│   │   │
│   │   ├── settings/
│   │   │
│   │   └── onboarding/
│   │
│   ├── stores/                 # Pinia stores
│   │
│   ├── services/               # API services
│   │
│   ├── router/                 # Vue Router
│   │   ├── index.js
│   │   ├── guards.js
│   │   └── routes/
│   │
│   ├── plugins/                # Vue plugins
│   │   ├── vuetify.js
│   │   ├── apexcharts.js
│   │   ├── i18n.js
│   │   └── socket.js
│   │
│   ├── utils/                  # Utility functions
│   │
│   ├── assets/                 # Static assets
│   │   ├── styles/
│   │   ├── images/
│   │
│   ├── composables/            # Vue 3 composables
│   │
│   ├── App.vue                 # Root component
│   └── main.js                 # Entry point
│
├── tests/                      # Frontend tests
│   ├── unit/
│   ├── e2e/
│   └── setup.js
│
├── package.json
├── vite.config.js
├── .env
└── vitest.config.js

# Admin-specific Structure:
frontend-admin/
├── src/
│   ├── views/
│   │   ├── dashboard/
│   │   │
│   │   ├── customers/
│   │   │
│   │   ├── system/
│   │   │
│   │   ├── content/
│   │   │
│   │   └── reports/
│   │
│   ├── components/
│   │
└── package.json (different dependencies từ customer app)

# JavaScript SDK Structure
sdk/
├── src/
│   ├── core/
│   │   ├── tracker.js          # Main tracking logic
│   │   ├── identity.js         # User identification
│   │   ├── session.js          # Session management
│   │   ├── storage.js          # Data persistence
│   │   └── api.js              # API communication
│   │
│   ├── platforms/              # Platform-specific integrations
│   │   ├── wordpress.js
│   │   ├── shopify.js
│   │   ├── woocommerce.js
│   │   └── generic.js
│   │
│   ├── events/                 # Event tracking
│   │   ├── pageview.js
│   │   ├── click.js
│   │   ├── form.js
│   │   ├── ecommerce.js
│   │   └── custom.js
│   │
│   ├── integrations/           # Third-party integrations
│   │   ├── facebook.js
│   │   ├── google.js
│   │   └── gtm.js
│   │
│   ├── utils/
│   │   ├── dom.js
│   │   ├── device.js
│   │   ├── url.js
│   │   └── validation.js
│   │
│   └── index.js                # SDK entry point
│
├── dist/                       # Built SDK files
│   ├── journey-tracker.js      # Development version
│   ├── journey-tracker.min.js  # Production version
│   └── journey-tracker.esm.js  # ES Module version
│
├── examples/                   # Usage examples
│   ├── basic-setup.html
│   ├── wordpress-example.php
│   ├── shopify-example.liquid
│   └── react-example.jsx
│
├── tests/
│   ├── unit/
│   ├── integration/
│   └── e2e/
│
├── docs/                       # SDK documentation
│   ├── getting-started.md
│   ├── api-reference.md
│   ├── platform-guides/
│   └── troubleshooting.md
│
├── package.json
├── webpack.config.js
├── babel.config.js
└── .eslintrc.js

# Development Strategy: Complete One Feature Before Next
1. Phase 1: Base core
- Authentication & user management
- Client management system
- Thanh toán và quản lý gói đăng ký
- PayPal Subscription System

2. Phase 2: Customer Journey Tracking
Goal: Perfect customer journey tracking trước khi build features khác
Feature Scope:
✅ Complete User Identity Resolution System
✅ UTM Attribution Tracking (Full Multi-touch)
✅ Customer Journey Visualization
✅ Real-time Event Tracking
✅ Platform Integrations (WordPress, Shopify, Generic)
✅ Analytics Dashboard (Journey-focused)

Technical Deliverables:
Backend (Node.js) - Complete:
├── Identity resolution engine
├── UTM attribution processing
├── Session management
├── Event tracking & storage
├── Journey analytics engine
├── Real-time WebSocket updates
├── Platform-specific integrations
├── Data export functionality
└── RESTful API (v1 complete)

Frontend (Vue.js) - Complete:
├── Journey visualization dashboard
├── Real-time activity feed
├── Attribution analysis views
├── User segment builder
├── Settings & preferences
├── Data export interface
└── Mobile-responsive design

JavaScript SDK - Complete:
├── Universal tracking (all platforms)
├── Identity management
├── UTM parameter capture
├── Event auto-detection
├── WordPress deep integration
├── Shopify/WooCommerce support
├── Form tracking automation
├── E-commerce event capture
├── Error handling & retry logic
└── Performance optimization

3. Phase 3: A/B Testing System
Goal: Complete A/B testing platform before moving to next feature
Feature Scope:
✅ Visual A/B Test Builder (GTM-style interface)
✅ Advanced Element Selector
✅ Variant Management System
✅ Statistical Significance Engine
✅ Automated Winner Selection
✅ Integration với Journey Data
✅ Multi-page Test Support
✅ Advanced Targeting Rules

Technical Deliverables:
Backend A/B Testing - Complete:
├── A/B test configuration API
├── Variant assignment algorithm
├── Statistical analysis engine
├── Conversion tracking system
├── Test results calculations
├── Automated optimization logic
├── Advanced targeting engine
├── Test scheduling system
├── Performance analytics
└── Integration với journey data

Frontend A/B Testing - Complete:
├── Visual test builder interface
├── Advanced element selector tool
├── Variant editor với preview
├── Test configuration wizard
├── Statistical significance dashboard
├── Test results visualization
├── Performance comparison charts
├── Test management interface
├── Advanced targeting UI
└── Mobile test preview

SDK A/B Testing - Complete:
├── Real-time variant delivery
├── Advanced DOM manipulation
├── Test assignment persistence
├── Conversion goal tracking
├── Performance optimization
├── Multi-page test support
├── Advanced targeting logic
├── Error handling & fallbacks
├── Test debugging tools
└── Analytics integration

4. Phase 4 - Facebook CAPI Integration
Goal: Perfect Facebook Conversions API integration
Feature Scope:
✅ Complete Facebook CAPI Integration
✅ Advanced Attribution Analysis
✅ Custom Audience Building từ Journey Data
✅ Cross-platform Event Mapping
✅ Attribution Model Comparison
✅ Facebook Ads Performance Insights
✅ Automated Audience Optimization
✅ Real-time Event Synchronization
Technical Deliverables:
Backend Facebook Integration - Complete:
├── Facebook CAPI service (enterprise-grade)
├── Advanced event mapping system
├── Custom audience creation API
├── Attribution enhancement engine
├── Cross-platform data correlation
├── Facebook webhook handling
├── Event deduplication logic
├── Retry và error handling
├── Rate limiting management
└── Performance optimization

Frontend Facebook Features - Complete:
├── Facebook integration setup wizard
├── Advanced attribution dashboards
├── Audience management interface
├── Campaign performance analytics
├── Event mapping configuration
├── Attribution model comparison
├── Facebook-specific insights
├── Audience optimization suggestions
├── Real-time sync monitoring
└── ROI analysis tools

SDK Facebook Enhancement - Complete:
├── Facebook Pixel integration
├── Enhanced event data collection
├── Server-side event backup
├── Attribution context preservation
├── Event deduplication
├── Privacy-compliant data handling
├── Error recovery mechanisms
├── Performance monitoring
├── Debug mode cho troubleshooting
└── Advanced event enrichment


## Kế Hoạch Phase 1 - Base core
Step 1: Foundation Setup (3-5 days)
Backend Foundation:
├── Project structure setup✅
├── Database connection (PostgreSQL + Sequelize)✅
├── Redis connection ✅
├── Basic Express app với CORS✅
├── Environment configuration✅
└── Basic error handling middleware✅

Frontend Foundation:
├── Vue 3 + Vite setup (customer & admin)✅
├── Vuetify 3 configuration✅
├── Router setup với guards✅
├── Pinia stores structure✅
└── Axios configuration với interceptors✅
Step 2: Database Schema (2-3 days)
sqlCore Tables:
├── clients (tenant isolation)✅
├── users (authentication + profile)✅
├── subscriptions (PayPal integration)✅
├── payments (transaction history)✅
└── user_sessions (refresh token management)✅
Step 3: Authentication System (4-5 days)✅
Backend Auth:
├── JWT service (access + refresh tokens)✅
├── Password hashing (bcrypt)✅
├── Email service (Mailgun setup)✅
├── Auth middleware✅
└── Password reset flow✅

Frontend Auth:
├── Auth store (Pinia)✅
├── Login/Register forms✅
├── Token management✅
├── Route guards✅
└── Password reset UI✅
Step 4: Client Management (3-4 days)
Multi-tenant Setup:
├── Client registration flow
├── Tenant isolation middleware
├── Team invitation system
├── Role-based access control
└── Client settings management
Step 5: Subscription System (5-7 days)
PayPal Integration:
├── PayPal SDK setup✅
├── Subscription plans management✅
├── Recurring payment handling✅
├── One-time payment support✅
├── Upgrade/downgrade logic✅
├── Usage tracking foundation✅
└── Billing history✅
Step 6: Admin Panel (2-3 days)
Admin Features:
├── Customer management
├── Subscription overview
├── System health monitoring
└── Basic analytics
Total Estimate: 19-27 days

Milestone Deliverables:
Working authentication system
✅ Multi-tenant client management
✅ PayPal subscription integration
✅ Admin panel for system management
✅ Ready for Phase 2 (A/B Testing)


📋 Frontend Development Plan
Phase 1A: Frontend Customer (app.loomsky.net)
    Priority: Core Authentication & Dashboard
Step 1: Authentication Pages (3-4 days)
Pages to Build:
    ├── /login ✅ - Login form với token management            
    ├── /register ✅ - Multi-step registration wizard
    ├── /verify-email ✅ - Email verification page
    ├── /forgot-password ✅ - Password reset request
    ├── /reset-password ✅ - Password reset form
    ├── /accept-invitation (Làm sau) - Team invitation acceptance
    └── Layout components ✅ (Auth layout)

Step 2: Dashboard Foundation (2-3 days)
Core Dashboard:
    ├── /dashboard ✅ - Main dashboard với basic stats
    ├── /profile ✅- User profile management
    ├── /settings  - Account settings
    ├── Sidebar navigation ✅
    ├── Header với user menu ✅
    └── Protected route guards ✅

Step 3: Basic Client Management (2-3 days)
Client Features:
    ├── Client settings page
    ├── Team management (invite/remove members) ✅
    ├── Billing information display ✅
    ├── Subscription status
    └── Usage metrics display

Phase 1B: Frontend Admin (admin.loomsky.net)
Priority: System Management

Step 4: Admin Authentication (1-2 days)
Admin Auth:
    ├── Admin login (reuse components)
    ├── Admin-specific guards
    └── Admin layout

Step 5: Admin Dashboard (2-3 days)
Admin Features:
    ├── System overview dashboard
    ├── Customer management (list, view, edit)
    ├── Subscription management
    ├── System health monitoring
    └── Basic analytics

🎯 Technical Implementation Strategy:
Shared Components Library:

components/common/
    ├── forms/ (Input, Button, Select...)
    ├── layout/ (Header, Sidebar, Footer...)
    ├── ui/ (Card, Modal, Alert...)
    ├── charts/ (Basic chart components)
    └── auth/ (Login form, guards...)

State Management:
stores/
    ├── auth.js ✅ (Already created)
    ├── user.js (Profile, preferences)
    ├── client.js (Client settings, team)
    ├── admin.js (Admin-specific state)
    └── subscription.js (Billing, usage)

API Integration:
services/
    ├── api.js (Base API with interceptors)
    ├── auth.js (Auth endpoints)
    ├── user.js (Profile, settings)
    ├── client.js (Client management)
    └── admin.js (Admin endpoints)

https://g.co/gemini/share/6fa3bf1e96a1

https://g.co/gemini/share/48ea4f8d9b7b


Tổng quan Kế hoạch Triển khai: Visual Data Mapper
    Mục tiêu cuối cùng: Cho phép người dùng không biết kỹ thuật có thể "dạy" cho LoomSky biết các mẩu dữ liệu quan trọng (tên sản phẩm, giá, nút bấm...) nằm ở đâu trên website của họ một cách trực quan.
    Thời gian dự kiến: 8-14 ngày làm việc.

Phase 1: Nền tảng Backend (2-3 ngày)
    Mục tiêu: Xây dựng xương sống API và cơ sở dữ liệu để lưu trữ và xác thực cấu hình.

Công việc 1.1: Xây dựng Cấu trúc Dữ liệu
    Action: Tạo migration và model Sequelize cho bảng DataMappings.
    Schema: id (PK), website_id (FK), variable_name (STRING), selector (TEXT), page_context (STRING, nullable).
    Kết quả: Cấu trúc database đã sẵn sàng để lưu trữ các ánh xạ.

Công việc 1.2: Xây dựng API CRUD cho DataMappings
    Action: Trong websiteController.js và website.js (routes), tạo các endpoint sau, đảm bảo tất cả đều yêu cầu xác thực và kiểm tra quyền sở hữu website:
        GET /api/v1/websites/{websiteId}/datamaps: Lấy danh sách tất cả ánh xạ cho một website.
        POST /api/v1/websites/{websiteId}/datamaps: Tạo một ánh xạ mới.
        DELETE /api/v1/websites/{websiteId}/datamaps/{mapId}: Xóa một ánh xạ.
    Kết quả: Giao diện người dùng có thể đọc, ghi, và xóa các cấu hình ánh xạ.  

Công việc 1.3: Xây dựng API Xác thực cho "Chế độ Thiết lập"
    Action: Tạo hai endpoint mới trong một file controller/route phù hợp (ví dụ: sdkController.js).
        POST /api/v1/sdk/init-setup: Endpoint này yêu cầu xác thực user. Nó sẽ tạo một setup_token (JWT hoặc UUID dùng một lần, lưu trong Redis với TTL 5 phút) và trả về cho frontend.
        POST /api/v1/sdk/verify-setup: Endpoint này không yêu cầu xác thực user. Nó nhận setup_token từ SDK, kiểm tra tính hợp lệ trong Redis, và nếu hợp lệ, trả về một "vé" cho phép SDK tiếp tục hoạt động.
    Kết quả: Một luồng ủy quyền an toàn cho phép SDK kích hoạt các tính năng đặc biệt một cách có kiểm soát.

Công việc 1.4: Cập nhật API Cấu hình SDK
    Action: Sửa đổi endpoint GET /api/v1/sdk/config để nó eager-load và trả về danh sách các DataMappings thuộc về website đó.
    Kết quả: SDK khi chạy ở chế độ bình thường sẽ biết được "Từ điển Dữ liệu" của website.

Phase 2: Frontend - "Tác Nhân Nội Bộ" (Vue Mini-App) (3-5 ngày)
    Mục tiêu: Xây dựng giao diện người dùng trực quan sẽ được chèn vào website của khách hàng.

Công việc 2.1: Thiết lập Build Process
    Action: Cấu hình Vite (hoặc Webpack) trong dự án frontend-customer để có một lệnh build riêng (ví dụ: npm run build:mapper). Lệnh này sẽ biên dịch một component Vue cụ thể (ví dụ: DataMapper.vue) và các thành phần con của nó thành một file mapper.js và mapper.css duy nhất.
    Kết quả: Có các file tĩnh để SDK có thể tải về.

Công việc 2.2: Xây dựng Giao diện Người dùng (UI)
    Action: Phát triển các component Vue cho công cụ:
        MapperContainer.vue: Component gốc, sẽ tạo ra Shadow DOM.
        Toolbar.vue: Thanh công cụ nhỏ hiển thị trên trang (ví dụ: ở góc dưới cùng).
        HighlightOverlay.vue: Một component tuyệt đối vị trí để vẽ đường viền xung quanh các phần tử.
        MappingModal.vue: Hộp thoại hiện lên sau khi click, chứa CSS selector và dropdown chọn variable_name.
    Kết quả: Một giao diện người dùng hoàn chỉnh, đóng gói và sẵn sàng để được mount.

Công việc 2.3: Phát triển Logic "Selector"
    Action: Viết logic cốt lõi bên trong các component Vue:
        Gắn các event listener (mouseover, click) vào document của trang cha (bên ngoài Shadow DOM).
        Viết hàm generateCssSelector(element) để tạo ra một selector đủ tin cậy và duy nhất cho phần tử được click.
        Quản lý state: phần tử nào đang được chọn, modal có đang mở hay không...
    Kết quả: Công cụ có khả năng tương tác với trang của khách hàng.

Phase 3: SDK - Nâng cấp "Bộ Não" (2-4 ngày)
    Mục tiêu: "Dạy" cho SDK cách kích hoạt "Chế độ Thiết lập" và sau đó là cách sử dụng "Từ điển Dữ liệu".

Công việc 3.1: Triển khai Logic Kích hoạt
    Action: Trong file khởi tạo của SDK (core.js hoặc index.js):
        Thêm logic kiểm tra window.location.search để tìm ls_setup_mode=true.
        Nếu tìm thấy, lấy ls_token và gọi API POST /api/v1/sdk/verify-setup.
    Kết quả: SDK có thể nhận lệnh từ ứng dụng LoomSky.

Công việc 3.2: Triển khai Cơ chế "Injection"
    Action: Khi API verify-setup trả về thành công, SDK sẽ:
        Tạo động một thẻ <link rel="stylesheet"> để tải file mapper.css.
        Tạo động một thẻ <script> để tải file mapper.js.
        Sau khi script được tải, gọi hàm mountDataMapperApp() được export từ script đó để khởi chạy ứng dụng Vue bên trong Shadow DOM.
    Kết quả: SDK có khả năng "chèn" và khởi chạy công cụ Visual Mapper.

Công việc 3.3: Nâng cấp "Engine Thu thập Dữ liệu"
    Action: Trong luồng hoạt động bình thường (không phải setup mode), SDK sẽ:
        Lấy danh sách DataMappings từ API /sdk/config.
        Khi trang tải xong, nó sẽ duyệt qua danh sách này, dùng document.querySelector với các selector đã lưu để tìm các phần tử tương ứng.
        Lấy nội dung (innerText, value...) của các phần tử tìm thấy và lưu vào một đối tượng dữ liệu nội bộ, sẵn sàng cho các "Trình Kích hoạt" sử dụng.
    Kết quả: SDK giờ đây có khả năng "đọc hiểu" website của khách hàng.

Phase 4: Tích hợp & Hoàn thiện (1-2 ngày)
    Mục tiêu: Kết nối tất cả các thành phần lại với nhau và đảm bảo luồng hoạt động mượt mà.

Công việc 4.1: Kết nối Frontend và Backend
    Action: Trong frontend-customer, trang WebsiteDetailView.vue, triển khai logic cho nút "Thiết lập Ánh xạ Dữ liệu": gọi API init-setup và window.open với URL đã định dạng.
    Action: Trong ứng dụng Vue mini, logic của nút "Lưu" trong modal sẽ gọi trực tiếp đến API POST /api/v1/websites/{websiteId}/datamaps.
    Action: Triển khai giao diện hiển thị danh sách các ánh xạ đã lưu và nút xóa tương ứng.

Công việc 4.2: Kiểm thử Toàn diện (E2E)
    Action: Thực hiện kiểm thử trên nhiều loại website khác nhau (WordPress, HTML đơn giản, trang có cấu trúc phức tạp) để đảm bảo:
        Luồng kích hoạt hoạt động ổn định.
        Việc highlight và chọn phần tử chính xác.
        CSS selector được tạo ra là đáng tin cậy.
        Dữ liệu được lưu và tải lại chính xác.
    Kết quả cuối cùng: Một tính năng hoàn chỉnh, mạnh mẽ và sẵn sàng để người dùng trải nghiệm.